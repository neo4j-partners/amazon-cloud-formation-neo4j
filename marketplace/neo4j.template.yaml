AWSTemplateFormatVersion: '2010-09-09'
Description: Neo4j Enterprise Edition
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Neo4j Configuration"
        Parameters:
          - GraphDatabaseVersion
          - InstallGraphDataScience
          - GraphDataScienceLicenseKey
          - InstallBloom
          - BloomLicenseKey
          - Password
      - Label:
          default: "Infrastructure Configuration"
        Parameters:
          - CoreInstanceCount
          - ReadReplicaCount
          - InstanceType
          - DiskSize
          - SSHCIDR
    ParameterLabels:
      GraphDatabaseVersion:
        default: Graph Database Version
      InstallGraphDataScience:
        default: Install Graph Data Science
      GraphDataScienceLicenseKey:
        default: Graph Data Science License Key
      InstallBloom:
        default: Install Bloom
      BloomLicenseKey:
        default: Bloom License Key
      Password:
        default: Password
      CoreInstanceCount:
        default: Core Instance Count
      ReadReplicaCount:
        default: Read Replica Count
      InstanceType:
        default: Instance Type
      DiskSize:
        default: Disk Size
      SSHCIDR:
        default: SSH CIDR

Parameters:
  GraphDatabaseVersion:
    Description: Neo4j Graph Database Version
    Type: List<String>
    AllowedValues:
      - '4.4.11'
      - '5.0.0'

  InstallGraphDataScience:
    Description: Install Graph Data Science
    Type: String
    Default: 'False'
    AllowedValues:
      - 'True'
      - 'False'

  GraphDataScienceLicenseKey:
    Description: License Key for Graph Data Science (License keys will be sent to and stored by Neo4j. This information will only be used for the purposes of product activation.)
    Type: String
    Default: 'None'

  InstallBloom:
    Description: Install Bloom
    Type: String
    Default: 'False'
    AllowedValues:
      - 'True'
      - 'False'

  BloomLicenseKey:
    Description: License Key for Bloom (License keys will be sent to and stored by Neo4j. This information will only be used for the purposes of product activation.)
    Type: String
    Default: 'None'

  Password:
    Description: Password for Neo4j
    Type: String
    MinLength: 6
    NoEcho: true

  CoreInstanceCount:
    Description: Number of core nodes
    Type: Number
    Default: 3
    AllowedValues:
      - 1
      - 3

  ReadReplicaCount:
    Description: Number of read replicas
    Type: Number
    Default: 0
    AllowedValues:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - r6i.large
      - r6i.xlarge
      - r6i.2xlarge
      - r6i.4xlarge
      - r6i.8xlarge
      - r6i.12xlarge
      - r6i.16xlarge
      - r6i.24xlarge
      - r6i.32xlarge

  DiskSize:
    Description: Size in GB of the EBS volume on each node
    Type: Number
    Default: 100
    MinValue: 100
    ConstraintDescription: "Minimum disk size should be 100"

  SSHCIDR:
    Description: SSH CIDR (Specify an address range from which ec2 instances are accessible on port 22. You can use 0.0.0.0/0 to allow access from any IP address)
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid CIDR range of the form x.x.x.x/x."

Rules:
    GDSCheck:
      RuleCondition: !Equals
        - !Ref InstallGraphDataScience
        - 'True'
      Assertions:
        - Assert: !Not
            - !Equals
              - !Ref CoreInstanceCount
              - '3'
          AssertDescription: Node Count cannot be set to 3 when InstallGraphDataScience is selected. Please set Node Count to 1 or set InstallGraphDataScience to false.

Conditions:
  CreateReadReplicas: !Not
    - !Equals
      - !Ref ReadReplicaCount
      - '0'

Resources:
  Neo4jVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'

  Neo4jSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC

  Neo4jSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC

  Neo4jSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC

  Neo4jRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC

  Neo4jRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref Neo4jInternetGateway
      RouteTableId: !Ref Neo4jRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  Neo4jSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Neo4jRouteTable
      SubnetId: !Ref Neo4jSubnet1


  Neo4jSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Neo4jRouteTable
      SubnetId: !Ref Neo4jSubnet2

  Neo4jSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Neo4jRouteTable
      SubnetId: !Ref Neo4jSubnet3

  Neo4jInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'

  Neo4jInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Neo4jInternetGateway
      VpcId: !Ref Neo4jVPC

  Neo4jNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - 'nlb'
      Scheme: internet-facing
      Subnets:
        - Ref: Neo4jSubnet1
        - Ref: Neo4jSubnet2
        - Ref: Neo4jSubnet3
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      Type: network

  Neo4jHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref Neo4jHTTPTargetGroup
          Type: forward
      LoadBalancerArn: !Ref Neo4jNetworkLoadBalancer
      Port: 7474
      Protocol: TCP

  Neo4jHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref Neo4jHTTPSTargetGroup
          Type: forward
      LoadBalancerArn: !Ref Neo4jNetworkLoadBalancer
      Port: 7473
      Protocol: TCP

  Neo4jBoltListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref Neo4jBoltTargetGroup
          Type: forward
      LoadBalancerArn: !Ref Neo4jNetworkLoadBalancer
      Port: 7687
      Protocol: TCP

  Neo4jHTTPTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - 'http'
          - 'tg'
      Port: 7474
      Protocol: TCP
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC

  Neo4jHTTPSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - 'https'
          - 'tg'
      Port: 7473
      Protocol: TCP
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC

  Neo4jBoltTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - 'bolt'
          - 'tg'
      Port: 7687
      Protocol: TCP
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC


  Neo4jAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !Ref CoreInstanceCount
        Timeout: PT3M
    Properties:
      AvailabilityZones: [!Select [ 0, Fn::GetAZs: !Ref 'AWS::Region' ] , !Select [ 1, Fn::GetAZs: !Ref 'AWS::Region' ] , !Select [ 2, Fn::GetAZs: !Ref 'AWS::Region' ]]
      LaunchConfigurationName:
        Ref: Neo4jLaunchConfiguration
      MinSize: !Ref CoreInstanceCount
      MaxSize: !Ref CoreInstanceCount
      VPCZoneIdentifier:
        - !Ref Neo4jSubnet1
        - !Ref Neo4jSubnet2
        - !Ref Neo4jSubnet3
      TargetGroupARNs:
        - Ref: Neo4jHTTPTargetGroup
        - Ref: Neo4jHTTPSTargetGroup
        - Ref: Neo4jBoltTargetGroup
      DesiredCapacity:
        Ref: CoreInstanceCount
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true


  Neo4jLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
        - Neo4j
        - !Ref 'AWS::Region'
        - BYOL
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: Neo4jExternalSecurityGroup
        - Ref: Neo4jInternalSecurityGroup
      EbsOptimized: true
      IamInstanceProfile:
        Ref: Neo4jInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize:
              Ref: DiskSize
            VolumeType: gp3
            Encrypted: true
      UserData:
        Fn::Base64:
          !Join
          - ''
          - - "#!/bin/bash\n"
            - "echo Running startup script...\n"

            - "graphDatabaseVersion="
            - Ref: GraphDatabaseVersion
            - "\n"

            - "installGraphDataScience="
            - Ref: InstallGraphDataScience
            - "\n"

            - "graphDataScienceLicenseKey="
            - Ref: GraphDataScienceLicenseKey
            - "\n"

            - "installBloom="
            - Ref: InstallBloom
            - "\n"

            - "bloomLicenseKey="
            - Ref: BloomLicenseKey
            - "\n"

            - "password="
            - Ref: Password
            - "\n"

            - "nodeCount="
            - Ref: CoreInstanceCount
            - "\n"

            - "readReplicaCount="
            - Ref: ReadReplicaCount
            - "\n"

            - "loadBalancerDNSName="
            - Fn::GetAtt: [Neo4jNetworkLoadBalancer,DNSName]
            - "\n"

            - "stackName="
            - Ref: AWS::StackName
            - "\n"

            - "region="
            - Ref: AWS::Region
            - "\n"

            - "loadBalancerDNSName="
            - Fn::GetAtt: [Neo4jNetworkLoadBalancer,DNSName]
            - "\n"

            - "wget -O /tmp/core.sh https://raw.githubusercontent.com/neo4j-partners/amazon-cloud-formation-neo4j/feature/versions-selection/marketplace/core.sh\n"
            - "/bin/bash /tmp/core.sh ${graphDatabaseVersion} ${installGraphDataScience} ${graphDataScienceLicenseKey} ${installBloom} ${bloomLicenseKey} ${password} ${nodeCount} ${readReplicaCount} ${loadBalancerDNSName} ${stackName} ${region} ${loadBalancerDNSName}\n"
        

  Neo4jReadReplicaAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: CreateReadReplicas
    DependsOn: Neo4jAutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !Ref ReadReplicaCount
        Timeout: PT3M
    Properties:
      AvailabilityZones: [!Select [ 0, Fn::GetAZs: !Ref 'AWS::Region' ] , !Select [ 1, Fn::GetAZs: !Ref 'AWS::Region' ] , !Select [ 2, Fn::GetAZs: !Ref 'AWS::Region' ]]
      LaunchConfigurationName:
        Ref: Neo4jReadReplicaLaunchConfiguration
      MinSize: !Ref ReadReplicaCount
      MaxSize: !Ref ReadReplicaCount
      VPCZoneIdentifier:
        - !Ref Neo4jSubnet1
        - !Ref Neo4jSubnet2
        - !Ref Neo4jSubnet3
      TargetGroupARNs:
        - Ref: Neo4jHTTPTargetGroup
        - Ref: Neo4jHTTPSTargetGroup
        - Ref: Neo4jBoltTargetGroup
      DesiredCapacity:
        Ref: ReadReplicaCount
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true

  Neo4jReadReplicaLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: CreateReadReplicas
    DependsOn: Neo4jAutoScalingGroup
    Properties:
      ImageId: !FindInMap
        - Neo4j
        - !Ref 'AWS::Region'
        - BYOL
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: Neo4jExternalSecurityGroup
        - Ref: Neo4jInternalSecurityGroup
      EbsOptimized: true
      IamInstanceProfile:
        Ref: Neo4jInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize:
              Ref: DiskSize
            VolumeType: gp3
            Encrypted: true
      UserData:
        Fn::Base64:
          !Join
          - ''
          - - "#!/bin/bash\n"
            - "echo Running startup script...\n"

            - "graphDatabaseVersion="
            - Ref: GraphDatabaseVersion
            - "\n"

            - "password="
            - Ref: Password
            - "\n"

            - "nodeCount="
            - Ref: CoreInstanceCount
            - "\n"

            - "readReplicaCount="
            - Ref: ReadReplicaCount
            - "\n"

            - "stackName="
            - Ref: AWS::StackName
            - "\n"

            - "region="
            - Ref: AWS::Region
            - "\n"

            - "wget -O /tmp/readreplica.sh https://raw.githubusercontent.com/neo4j-partners/amazon-cloud-formation-neo4j/feature/versions-selection/marketplace/readreplica.sh\n"
            - "/bin/bash /tmp/readreplica.sh ${graphDatabaseVersion} ${password} ${nodeCount} ${readReplicaCount} ${stackName} ${region}\n"



  Neo4jInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: Neo4jRole
  Neo4jRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Neo4jPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingInstances
                  - cloudformation:DescribeStack*
                  - ec2:DescribeInstances
                Resource: "*"

  Neo4jExternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and Neo4j External Ports
      VpcId: !Ref Neo4jVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCIDR
        - IpProtocol: tcp
          FromPort: 7473
          ToPort: 7473
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7474
          ToPort: 7474
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7687
          ToPort: 7687
          CidrIp: 0.0.0.0/0

  Neo4jInternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Neo4j Internal Ports
      VpcId: !Ref Neo4jVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 6000
          ToPort: 6000
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 7000
          ToPort: 7000
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 7688
          ToPort: 7688
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 2003
          ToPort: 2003
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 2004
          ToPort: 2004
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 3637
          ToPort: 3637
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 5005
          ToPort: 5005
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId

Outputs:
  Neo4jBrowserURL:
    Description: URL for Neo4j Browser
    Value: !Join
    - ''
    - - 'http://'
      - !GetAtt Neo4jNetworkLoadBalancer.DNSName
      - ':'
      - '7474'
  Neo4jURI:
    Description: Neo4j URI Scheme
    Value: !Join
      - ''
      - - 'neo4j://'
        - !GetAtt Neo4jNetworkLoadBalancer.DNSName
        - ':'
        - '7687'
  Neo4jUsername:
    Description: Username for Neo4j
    Value: 'The username is neo4j.  The password is what you provided to the template.'

Mappings:
  Neo4j:
    us-east-1:
      BYOL: ami-0f26ab7914fc9bc20
