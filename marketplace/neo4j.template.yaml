AWSTemplateFormatVersion: '2010-09-09'
Description: Neo4j Enterprise Edition
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Neo4j Configuration"
        Parameters:
          - GraphDatabaseVersion
          - InstallGraphDataScience
          - GraphDataScienceLicenseKey
          - InstallBloom
          - BloomLicenseKey
          - Password
      - Label:
          default: "Infrastructure Configuration"
        Parameters:
          - NodeCount
          - ReadReplicaCount
          - InstanceType
          - DiskSize
          - SSHCIDR
    ParameterLabels:
      GraphDatabaseVersion:
        default: Graph Database Version
      InstallGraphDataScience:
        default: Install Graph Data Science
      GraphDataScienceLicenseKey:
        default: Graph Data Science License Key
      InstallBloom:
        default: Install Bloom
      BloomLicenseKey:
        default: Bloom License Key
      Password:
        default: Password
      NodeCount:
        default: Node Count
      ReadReplicaCount:
        default: Read Replica Count
      InstanceType:
        default: Instance Type
      DiskSize:
        default: Disk Size
      SSHCIDR:
        default: SSH CIDR

Parameters:
  GraphDatabaseVersion:
    Description: Neo4j Graph Database Version
    Type: String
    Default: '4.4.9'

  InstallGraphDataScience:
    Description: Install Graph Data Science
    Type: String
    Default: 'False'
    AllowedValues:
      - 'True'
      - 'False'

  GraphDataScienceLicenseKey:
    Description: License Key for Graph Data Science (License keys will be sent to and stored by Neo4j. This information will only be used for the purposes of product activation.)
    Type: String
    Default: 'None'

  InstallBloom:
    Description: Install Bloom
    Type: String
    Default: 'False'
    AllowedValues:
      - 'True'
      - 'False'

  BloomLicenseKey:
    Description: License Key for Bloom (License keys will be sent to and stored by Neo4j. This information will only be used for the purposes of product activation.)
    Type: String
    Default: 'None'

  Password:
    Description: Password for Neo4j
    Type: String
    MinLength: 6
    NoEcho: true

  NodeCount:
    Description: Number of core nodes
    Type: Number
    Default: 3
    AllowedValues:
      - 1
      - 3

  ReadReplicaCount:
    Description: Number of read replicas
    Type: Number
    Default: 0
    AllowedValues:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - r6i.large
      - r6i.xlarge
      - r6i.2xlarge
      - r6i.4xlarge
      - r6i.8xlarge
      - r6i.12xlarge
      - r6i.16xlarge
      - r6i.24xlarge
      - r6i.32xlarge

  DiskSize:
    Description: Size in GB of the EBS volume on each node
    Type: Number
    Default: 100
    MinValue: 100
    ConstraintDescription: "Minimum disk size should be 100"

  SSHCIDR:
    Description: SSH CIDR (Specify an address range from which ec2 instances are accessible on port 22. You can use 0.0.0.0/0 to allow access from any IP address)
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid CIDR range of the form x.x.x.x/x."

Rules:
    GDSCheck:
      RuleCondition: !Equals
        - !Ref InstallGraphDataScience
        - 'True'
      Assertions:
        - Assert: !Not
            - !Equals
              - !Ref NodeCount
              - '3'
          AssertDescription: Node Count cannot be set to 3 when InstallGraphDataScience is selected. Please set Node Count to 1 or set InstallGraphDataScience to false.

Conditions:
  CreateReadReplicas: !Not
    - !Equals
      - !Ref ReadReplicaCount
      - '0'

Resources:
  Neo4jVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'

  Neo4jSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - 'a'
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC

  Neo4jRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC

  Neo4jRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref Neo4jInternetGateway
      RouteTableId: !Ref Neo4jRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  Neo4jSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Neo4jRouteTable
      SubnetId: !Ref Neo4jSubnet

  Neo4jInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'

  Neo4jInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Neo4jInternetGateway
      VpcId: !Ref Neo4jVPC

  Neo4jNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - 'nlb'
      Scheme: internet-facing
      Subnets:
        - Ref: Neo4jSubnet
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      Type: network

  Neo4jHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref Neo4jHTTPTargetGroup
          Type: forward
      LoadBalancerArn: !Ref Neo4jNetworkLoadBalancer
      Port: 7474
      Protocol: TCP

  Neo4jHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref Neo4jHTTPSTargetGroup
          Type: forward
      LoadBalancerArn: !Ref Neo4jNetworkLoadBalancer
      Port: 7473
      Protocol: TCP

  Neo4jBoltListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref Neo4jBoltTargetGroup
          Type: forward
      LoadBalancerArn: !Ref Neo4jNetworkLoadBalancer
      Port: 7687
      Protocol: TCP

  Neo4jHTTPTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - 'http'
          - 'tg'
      Port: 7474
      Protocol: TCP
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC

  Neo4jHTTPSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - 'https'
          - 'tg'
      Port: 7473
      Protocol: TCP
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC

  Neo4jBoltTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - 'bolt'
          - 'tg'
      Port: 7687
      Protocol: TCP
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref Neo4jVPC


  Neo4jAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Join
          - ''
          - - !Ref 'AWS::Region'
            - 'a'
      LaunchConfigurationName:
        Ref: Neo4jLaunchConfiguration
      MinSize: !Ref NodeCount
      MaxSize: !Ref NodeCount
      VPCZoneIdentifier:
        - !Ref Neo4jSubnet
      TargetGroupARNs:
        - Ref: Neo4jHTTPTargetGroup
        - Ref: Neo4jHTTPSTargetGroup
        - Ref: Neo4jBoltTargetGroup
      DesiredCapacity:
        Ref: NodeCount
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true


  Neo4jLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
        - Neo4j
        - !Ref 'AWS::Region'
        - BYOL
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: Neo4jExternalSecurityGroup
        - Ref: Neo4jInternalSecurityGroup
      EbsOptimized: true
      IamInstanceProfile:
        Ref: Neo4jInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize:
              Ref: DiskSize
            VolumeType: gp3
            Encrypted: true
      UserData:
        Fn::Base64:
          !Join
          - ''
          - - "#!/bin/bash\n"
            - "echo Running startup script...\n"

            - "graphDatabaseVersion="
            - Ref: GraphDatabaseVersion
            - "\n"

            - "installGraphDataScience="
            - Ref: InstallGraphDataScience
            - "\n"

            - "graphDataScienceLicenseKey="
            - Ref: GraphDataScienceLicenseKey
            - "\n"

            - "installBloom="
            - Ref: InstallBloom
            - "\n"

            - "bloomLicenseKey="
            - Ref: BloomLicenseKey
            - "\n"

            - "password="
            - Ref: Password
            - "\n"

            - "nodeCount="
            - Ref: NodeCount
            - "\n"

            - "readReplicaCount="
            - Ref: ReadReplicaCount
            - "\n"

            - "loadBalancerDNSName="
            - Fn::GetAtt: [Neo4jNetworkLoadBalancer,DNSName]
            - "\n"

            - "echo Adding neo4j yum repo...\n"
            - "rpm --import https://debian.neo4j.com/neotechnology.gpg.key\n"
            - "echo \""
            - "[neo4j]\n"
            - "name=Neo4j Yum Repo\n"
            - "baseurl=http://yum.neo4j.com/stable\n"
            - "enabled=1\n"
            - "gpgcheck=1\" > /etc/yum.repos.d/neo4j.repo\n"

            - "echo Installing Graph Database...\n"
            - "export NEO4J_ACCEPT_LICENSE_AGREEMENT=yes\n"
            - "yum -y install neo4j-enterprise-${graphDatabaseVersion}\n"

            - "echo Installing APOC...\n"
            - "mv /var/lib/neo4j/labs/apoc-*-core.jar /var/lib/neo4j/plugins\n"

            - "echo Configuring extensions and security in neo4j.conf...\n"
            - "sed -i s~#dbms.unmanaged_extension_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged~dbms.unmanaged_extension_classes=com.neo4j.bloom.server=/bloom,semantics.extension=/rdf~g /etc/neo4j/neo4j.conf\n"
            - "sed -i s/#dbms.security.procedures.unrestricted=my.extensions.example,my.procedures.*/dbms.security.procedures.unrestricted=gds.*,apoc.*,bloom.*/g /etc/neo4j/neo4j.conf\n"
            - "sed -i '$a dbms.security.http_auth_allowlist=/,/browser.*,/bloom.*' /etc/neo4j/neo4j.conf\n"
            - "sed -i '$a dbms.security.procedures.allowlist=apoc.*,gds.*,bloom.*' /etc/neo4j/neo4j.conf\n"

            - "echo Configuring network in neo4j.conf...\n"
            - "sed -i 's/#dbms.default_listen_address=0.0.0.0/dbms.default_listen_address=0.0.0.0/g' /etc/neo4j/neo4j.conf\n"

            - "privateIP=$(hostname -i | awk {'print $NF'})\n"
            - "publicHostname=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)\n"

            - "function set_cluster_configs {\n"
            - "   sed -i s/#dbms.default_advertised_address=localhost/dbms.default_advertised_address=${privateIP}/g /etc/neo4j/neo4j.conf\n"
            - "   sed -i s/#causal_clustering.discovery_listen_address=:5000/causal_clustering.discovery_listen_address=${privateIP}:5000/g /etc/neo4j/neo4j.conf\n"
            - "   sed -i s/#causal_clustering.transaction_listen_address=:6000/causal_clustering.transaction_listen_address=${privateIP}:6000/g /etc/neo4j/neo4j.conf\n"
            - "   sed -i s/#causal_clustering.raft_listen_address=:7000/causal_clustering.raft_listen_address=${privateIP}:7000/g /etc/neo4j/neo4j.conf\n"
            - "   sed -i s/#dbms.connector.bolt.listen_address=:7687/dbms.connector.bolt.listen_address=${privateIP}:7687/g /etc/neo4j/neo4j.conf\n"
            - "   sed -i s/#dbms.connector.http.advertised_address=:7474/dbms.connector.http.advertised_address=${privateIP}:7474/g /etc/neo4j/neo4j.conf\n"
            - "   sed -i s/#dbms.connector.https.advertised_address=:7473/dbms.connector.https.advertised_address=${privateIP}:7473/g /etc/neo4j/neo4j.conf\n"
            - "   sed -i s/#dbms.routing.enabled=false/dbms.routing.enabled=true/g /etc/neo4j/neo4j.conf\n"
            - "   sed -i s/#dbms.routing.advertised_address=:7688/dbms.routing.advertised_address=${privateIP}:7688/g /etc/neo4j/neo4j.conf\n"
            - "   sed -i s/#dbms.routing.listen_address=0.0.0.0:7688/dbms.routing.listen_address=${privateIP}:7688/g /etc/neo4j/neo4j.conf\n"
            - "   echo dbms.routing.default_router=SERVER >> /etc/neo4j/neo4j.conf\n"
            - "}\n"

            - "if [[ \"$nodeCount\" == 1 ]]; then\n"
            - "  echo Running on a single node.\n"

            - "  if [[ \"$readReplicaCount\" == 0 ]]; then\n"
            - "     sed -i s/#dbms.default_advertised_address=localhost/dbms.default_advertised_address=${loadBalancerDNSName}/g /etc/neo4j/neo4j.conf\n"
            - "  else\n"
            - "     sed -i s/#dbms.mode=CORE/dbms.mode=SINGLE/g /etc/neo4j/neo4j.conf\n"
            - "     sed -i '$a dbms.clustering.enable=true' /etc/neo4j/neo4j.conf\n"
            - "     set_cluster_configs\n"
            - "  fi\n"

            - "else\n"
            - "  echo Running on multiple nodes.  Configuring membership in neo4j.conf...\n"
            - "  region=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/.$//')\n"
            - "  instanceId=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n"
            - "  stackName=$(aws cloudformation describe-stack-resources --physical-resource-id $instanceId --query 'StackResources[0].StackName' --output text --region $region)\n"
            - "  coreMembers=$(aws autoscaling describe-auto-scaling-instances --region $region --output text --query \"AutoScalingInstances[?contains(AutoScalingGroupName,'$stackName-Neo4jAutoScalingGroup')].[InstanceId]\" | xargs -n1 -I {} aws ec2 describe-instances --instance-ids {} --region $region --query \"Reservations[].Instances[].PrivateIpAddress\" --output text --filter \"Name=tag:aws:cloudformation:stack-name,Values=$stackName\")\n"
            - "  coreMembers=$(echo $coreMembers | sed 's/ /:5000,/g')\n"
            - "  coreMembers=$(echo $coreMembers):5000\n"
            - "  sed -i s/#causal_clustering.initial_discovery_members=localhost:5000,localhost:5001,localhost:5002/causal_clustering.initial_discovery_members=${coreMembers}/g /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#dbms.mode=CORE/dbms.mode=CORE/g /etc/neo4j/neo4j.conf\n"
            - "  set_cluster_configs\n"
            - "fi\n"

            - "echo Turning on SSL...\n"
            - "sed -i 's/dbms.connector.https.enabled=false/dbms.connector.https.enabled=true/g' /etc/neo4j/neo4j.conf\n"

            - "openssl req -newkey rsa:2048 -nodes -keyout privatekey.pem -x509 -days 365 -out public.pem -subj \"/C=GB/ST=London/L=London/O=Neo4j/OU=IT Department\"\n"

#            - "for service in bolt https cluster; do\n"
            - "for service in https bolt cluster; do\n"
#            - "  sed -i \"s/#dbms.ssl.policy.${service}/dbms.ssl.policy.${service}/g\" /etc/neo4j/neo4j.conf\n"
            - "  mkdir -p /var/lib/neo4j/certificates/${service}/trusted\n"
            - "  mkdir -p /var/lib/neo4j/certificates/${service}/revoked\n"
            - "  cp privatekey.pem /var/lib/neo4j/certificates/${service}\n"
            - "  cp public.pem /var/lib/neo4j/certificates/${service}\n"
            - "  cp public.pem /var/lib/neo4j/certificates/${service}/trusted\n"

            - " echo dbms.ssl.policy.${service}.base_directory=/var/lib/neo4j/certificates/${service} >> /etc/neo4j/neo4j.conf\n"
            - " echo dbms.ssl.policy.${service}.private_key=privatekey.pem >> /etc/neo4j/neo4j.conf\n"
            - " echo dbms.ssl.policy.${service}.public_certificate=public.pem >> /etc/neo4j/neo4j.conf\n"
            - " echo dbms.ssl.policy.${service}.client_auth=NONE >> /etc/neo4j/neo4j.conf\n"
            - " echo dbms.ssl.policy.${service}.enabled=true >> /etc/neo4j/neo4j.conf\n"
            - " echo dbms.ssl.policy.${service}.trust_all=true >> /etc/neo4j/neo4j.conf\n"
            - "done\n"

            - " echo dbms.connector.bolt.tls_level=OPTIONAL >> /etc/neo4j/neo4j.conf\n"

            - "chown -R neo4j:neo4j /var/lib/neo4j/certificates\n"
            - "chmod -R 755 /var/lib/neo4j/certificates\n"

            - "if [[ $installGraphDataScience == True && $nodeCount == 1 ]]; then\n"
            - "  echo Installing Graph Data Science...\n"
            - "  cp /var/lib/neo4j/products/neo4j-graph-data-science-*.jar /var/lib/neo4j/plugins\n"
            - "fi\n"

            - "if [[ $graphDataScienceLicenseKey != None ]]; then\n"
            - "  echo Writing GDS license key...\n"
            - "  mkdir -p /etc/neo4j/licenses\n"
            - "  echo $graphDataScienceLicenseKey > /etc/neo4j/licenses/neo4j-gds.license\n"
            - "  sed -i '$a gds.enterprise.license_file=/etc/neo4j/licenses/neo4j-gds.license' /etc/neo4j/neo4j.conf\n"
            - "fi\n"

            - "if [[ $installBloom == True ]]; then\n"
            - "  echo Installing Bloom...\n"
            - "  cp /var/lib/neo4j/products/bloom-plugin-*.jar /var/lib/neo4j/plugins\n"
            - "fi\n"

            - "if [[ $bloomLicenseKey != None ]]; then\n"
            - "  echo Writing Bloom license key...\n"
            - "  mkdir -p /etc/neo4j/licenses\n"
            - "  echo $bloomLicenseKey > /etc/neo4j/licenses/neo4j-bloom.license\n"
            - "  sed -i '$a neo4j.bloom.license_file=/etc/neo4j/licenses/neo4j-bloom.license' /etc/neo4j/neo4j.conf\n"
            - "fi\n"

            - "echo Starting Neo4j...\n"
            - "service neo4j start\n"
            - "neo4j-admin set-initial-password ${password}\n"


  Neo4jReadReplicaAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: CreateReadReplicas
    DependsOn: Neo4jAutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Join
          - ''
          - - !Ref 'AWS::Region'
            - 'a'
      LaunchConfigurationName:
        Ref: Neo4jReadReplicaLaunchConfiguration
      MinSize: !Ref ReadReplicaCount
      MaxSize: !Ref ReadReplicaCount
      VPCZoneIdentifier:
        - !Ref Neo4jSubnet
      TargetGroupARNs:
        - Ref: Neo4jHTTPTargetGroup
        - Ref: Neo4jHTTPSTargetGroup
        - Ref: Neo4jBoltTargetGroup
      DesiredCapacity:
        Ref: ReadReplicaCount
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true

  Neo4jReadReplicaLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
        - Neo4j
        - !Ref 'AWS::Region'
        - BYOL
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: Neo4jExternalSecurityGroup
        - Ref: Neo4jInternalSecurityGroup
      EbsOptimized: true
      IamInstanceProfile:
        Ref: Neo4jInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize:
              Ref: DiskSize
            VolumeType: gp3
            Encrypted: true
      UserData:
        Fn::Base64:
          !Join
          - ''
          - - "#!/bin/bash\n"
            - "echo Running startup script...\n"

            - "graphDatabaseVersion="
            - Ref: GraphDatabaseVersion
            - "\n"

            - "password="
            - Ref: Password
            - "\n"

            - "nodeCount="
            - Ref: NodeCount
            - "\n"

            - "readReplicaCount="
            - Ref: ReadReplicaCount
            - "\n"

            - "echo Adding neo4j yum repo...\n"
            - "rpm --import https://debian.neo4j.com/neotechnology.gpg.key\n"
            - "echo \""
            - "[neo4j]\n"
            - "name=Neo4j Yum Repo\n"
            - "baseurl=http://yum.neo4j.com/stable\n"
            - "enabled=1\n"
            - "gpgcheck=1\" > /etc/yum.repos.d/neo4j.repo\n"

            - "echo Installing Graph Database...\n"
            - "export NEO4J_ACCEPT_LICENSE_AGREEMENT=yes\n"
            - "yum -y install neo4j-enterprise-${graphDatabaseVersion}\n"

            - "echo Installing APOC...\n"
            - "mv /var/lib/neo4j/labs/apoc-*-core.jar /var/lib/neo4j/plugins\n"

            - "echo Configuring extensions and security in neo4j.conf...\n"
            - "sed -i s~#dbms.unmanaged_extension_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged~dbms.unmanaged_extension_classes=com.neo4j.bloom.server=/bloom,semantics.extension=/rdf~g /etc/neo4j/neo4j.conf\n"
            - "sed -i s/#dbms.security.procedures.unrestricted=my.extensions.example,my.procedures.*/dbms.security.procedures.unrestricted=gds.*,apoc.*,bloom.*/g /etc/neo4j/neo4j.conf\n"
            - "sed -i '$a dbms.security.http_auth_allowlist=/,/browser.*,/bloom.*' /etc/neo4j/neo4j.conf\n"
            - "sed -i '$a dbms.security.procedures.allowlist=apoc.*,gds.*,bloom.*' /etc/neo4j/neo4j.conf\n"

            - "echo Configuring network in neo4j.conf...\n"
            - "sed -i 's/#dbms.default_listen_address=0.0.0.0/dbms.default_listen_address=0.0.0.0/g' /etc/neo4j/neo4j.conf\n"

            - "privateIP=$(hostname -i | awk {'print $NF'})\n"
            - "sed -i s/#dbms.mode=CORE/dbms.mode=READ_REPLICA/g /etc/neo4j/neo4j.conf\n"
            - "sed -i s/#dbms.default_advertised_address=localhost/dbms.default_advertised_address=${privateIP}/g /etc/neo4j/neo4j.conf\n"
            - "region=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/.$//')\n"
            - "instanceId=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n"
            - "stackName=$(aws cloudformation describe-stack-resources --physical-resource-id $instanceId --query 'StackResources[0].StackName' --output text --region $region)\n"
            - "coreMembers=$(aws autoscaling describe-auto-scaling-instances --region $region --output text --query \"AutoScalingInstances[?contains(AutoScalingGroupName,'$stackName-Neo4jAutoScalingGroup')].[InstanceId]\" | xargs -n1 -I {} aws ec2 describe-instances --instance-ids {} --region $region --query \"Reservations[].Instances[].PrivateIpAddress\" --output text --filter \"Name=tag:aws:cloudformation:stack-name,Values=$stackName\")\n"
            - "coreMembers=$(echo $coreMembers | sed 's/ /:5000,/g')\n"
            - "coreMembers=$(echo $coreMembers):5000\n"
            - "sed -i s/#causal_clustering.initial_discovery_members=localhost:5000,localhost:5001,localhost:5002/causal_clustering.initial_discovery_members=${coreMembers}/g /etc/neo4j/neo4j.conf\n"

            #    Server Side Routing configs
            - "sed -i s/#dbms.routing.enabled=false/dbms.routing.enabled=true/g /etc/neo4j/neo4j.conf\n"
            - "sed -i s/#dbms.routing.advertised_address=:7688/dbms.routing.advertised_address=${privateIP}:7688/g /etc/neo4j/neo4j.conf\n"
            - "sed -i s/#dbms.routing.listen_address=0.0.0.0:7688/dbms.routing.listen_address=${privateIP}:7688/g /etc/neo4j/neo4j.conf\n"
            - "echo dbms.routing.default_router=SERVER >> /etc/neo4j/neo4j.conf\n"

            - "echo Starting Neo4j...\n"
            - "service neo4j start\n"
            - "neo4j-admin set-initial-password ${password}\n"

  Neo4jInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: Neo4jRole
  Neo4jRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Neo4jPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingInstances
                  - cloudformation:DescribeStack*
                  - ec2:DescribeInstances
                Resource: "*"

  Neo4jExternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and Neo4j External Ports
      VpcId: !Ref Neo4jVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCIDR
        - IpProtocol: tcp
          FromPort: 7473
          ToPort: 7473
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7474
          ToPort: 7474
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7687
          ToPort: 7687
          CidrIp: 0.0.0.0/0

  Neo4jInternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Neo4j Internal Ports
      VpcId: !Ref Neo4jVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 6000
          ToPort: 6000
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 7000
          ToPort: 7000
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 7688
          ToPort: 7688
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 2003
          ToPort: 2003
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 2004
          ToPort: 2004
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 3637
          ToPort: 3637
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 5005
          ToPort: 5005
          SourceSecurityGroupId: !GetAtt Neo4jExternalSecurityGroup.GroupId

Outputs:
  Neo4jLoadBalancerURL:
    Description: URL for Neo4j LoadBalancer (Allow a few minutes for the URL to be active)
    Value: !Join
    - ''
    - - 'http://'
      - !GetAtt Neo4jNetworkLoadBalancer.DNSName
      - ':'
      - '7474'
  Neo4jUsername:
    Description: Username for Neo4j
    Value: 'The username is neo4j.  The password is what you provided to the template.'

Mappings:
  Neo4j:
    us-east-1:
      BYOL: ami-0129929d6c10908c8
