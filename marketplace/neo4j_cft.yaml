AWSTemplateFormatVersion: '2010-09-09'
Description: Neo4j Enterprise Edition
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Neo4j Configuration
      Parameters:
      - GraphDatabaseVersion
      - InstallGraphDataScience
      - GraphDataScienceLicenseKey
      - InstallBloom
      - BloomLicenseKey
      - Password
      - SelectSSR
    - Label:
        default: Infrastructure Configuration
      Parameters:
      - NodeCount
      - InstanceType
      - DiskSize
      - KeyName
      - SSHCIDR
      - VPCCIDR
      - SubnetCIDR
    ParameterLabels:
      GraphDatabaseVersion:
        default: Graph Database Version
      InstallGraphDataScience:
        default: Install Graph Data Science
      GraphDataScienceLicenseKey:
        default: Graph Data Science License Key
      InstallBloom:
        default: Install Bloom
      BloomLicenseKey:
        default: Bloom License Key
      SelectSSR:
        default: Configure Server Side Routing
      Password:
        default: Password
      NodeCount:
        default: Node Count
      InstanceType:
        default: Instance Type
      DiskSize:
        default: Disk Size
      KeyName:
        default: Key Name
      SSHCIDR:
        default: SSH CIDR
      VPCCIDR:
        default: VPC CIDR
      SubnetCIDR:
        default: Subnet CIDR
Parameters:
  GraphDatabaseVersion:
    Description: Neo4j Graph Database Version
    Type: String
    Default: 4.4.8
  InstallGraphDataScience:
    Description: Install Graph Data Science
    Type: String
    Default: 'False'
    AllowedValues:
    - 'True'
    - 'False'
  SelectSSR:
    Description: Install a Neo4J Cluster with Server Side Routing. Please note this
      will also provision a Network Load Balancer which will incur additional cost.
    Type: String
    Default: 'False'
    AllowedValues:
    - 'True'
    - 'False'
    ConstraintDescription: Specify if SSR is required
  GraphDataScienceLicenseKey:
    Description: License Key for Graph Data Science
    Type: String
    Default: None
  InstallBloom:
    Description: Install Bloom
    Type: String
    Default: 'False'
    AllowedValues:
    - 'True'
    - 'False'
  BloomLicenseKey:
    Description: License Key for Bloom
    Type: String
    Default: None
  Password:
    Description: Password for Neo4j
    Type: String
    MinLength: 6
    NoEcho: true
  NodeCount:
    Description: Number of core nodes
    Type: Number
    Default: 3
    AllowedValues:
    - 1
    - 3
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
    - t3.medium
    - t3.large
    - t3.xlarge
    - r6i.large
    - r6i.xlarge
    - r6i.2xlarge
    - r6i.4xlarge
    - r6i.8xlarge
    - r6i.12xlarge
    - r6i.16xlarge
    - r6i.24xlarge
    - r6i.32xlarge
  DiskSize:
    Description: Size in GB of the EBS volume on each node
    Type: Number
    Default: 100
    MinValue: 100
    ConstraintDescription: Minimum disk size should be 100
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
  SSHCIDR:
    Description: SSH CIDR (Specify an address range from which ec2 instances are accessible
      on port 22)
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
  VPCCIDR:
    Description: VPC CIDR (Specify an address range for the VPC. This is usually a
      X.X.X.X/16 range. Default value 10.1.2.0/16 provided)
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
    Default: 10.1.2.0/16
  SubnetCIDR:
    Description: Subnet CIDR (Specify an address range for the subnet. This is usually
      a X.X.X.X/24 range. Default value 10.1.2.1/24 provided)
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
    Default: 10.1.2.1/24
Conditions:
  ConfigureSSR:
    Fn::Equals:
    - Ref: SelectSSR
    - true
  NotConfigureSSR:
    Fn::Equals:
    - Ref: SelectSSR
    - false
Rules:
  SSRCheck:
    RuleCondition:
      Fn::Equals:
      - Ref: SelectSSR
      - 'True'
    Assertions:
    - Assert:
        Fn::Not:
        - Fn::Equals:
          - Ref: NodeCount
          - '1'
      AssertDescription: Node Count cannot be set to 1 when SSR is selected. Please
        set Node Count to 3 or set Server Side Routing to false.
  GDSCheck:
    RuleCondition:
      Fn::Equals:
      - Ref: InstallGraphDataScience
      - 'True'
    Assertions:
    - Assert:
        Fn::Not:
        - Fn::Equals:
          - Ref: NodeCount
          - '3'
      AssertDescription: Node Count cannot be set to 3 when InstallGraphDataScience
        is selected. Please set Node Count to 1 or set InstallGraphDataScience to
        false.
Mappings:
  Neo4j:
    us-east-1:
      BYOL: ami-0eef5ac563b679bd6
Resources:
  Neo4jNetworkingStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.us-east-1.amazonaws.com/harshit-cft/98a0e3f6dbd2f839a1ff7671e14c3512.template
      Parameters:
        SSHCIDR:
          Ref: SSHCIDR
        VPCCIDR:
          Ref: VPCCIDR
        SubnetCIDR:
          Ref: SubnetCIDR
        SelectSSR:
          Ref: SelectSSR
  Neo4jAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
      - Fn::Join:
        - ''
        - - Ref: AWS::Region
          - a
      LaunchConfigurationName:
        Ref: Neo4jLaunchConfiguration
      MinSize:
        Ref: NodeCount
      MaxSize:
        Ref: NodeCount
      VPCZoneIdentifier:
      - Fn::GetAtt:
        - Neo4jNetworkingStack
        - Outputs.Neo4jSubnet
      TargetGroupARNs:
        Fn::If:
        - ConfigureSSR
        - - GetAtt: Neo4jNetworkingStack.Outputs.Neo4jHTTPTargetGroup
          - GetAtt: Neo4jNetworkingStack.Outputs.Neo4jHTTPSTargetGroup
          - GetAtt: Neo4jNetworkingStack.Outputs.Neo4jBoltTargetGroup
        - Ref: AWS::NoValue
      DesiredCapacity:
        Ref: NodeCount
      Tags:
      - Key: StackID
        Value:
          Ref: AWS::StackId
        PropagateAtLaunch: true
      - Key: Name
        Value:
          Ref: AWS::StackName
        PropagateAtLaunch: true
  Neo4jLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Fn::FindInMap:
        - Neo4j
        - Ref: AWS::Region
        - BYOL
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Fn::GetAtt:
        - Neo4jNetworkingStack
        - Outputs.Neo4jExternalSecurityGroup
      - Fn::GetAtt:
        - Neo4jNetworkingStack
        - Outputs.Neo4jInternalSecurityGroup
      KeyName:
        Ref: KeyName
      EbsOptimized: true
      IamInstanceProfile:
        Ref: Neo4jInstanceProfile
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize:
            Ref: DiskSize
          VolumeType: gp3
          Encrypted: true
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - "echo Running startup script...\n"
            - graphDatabaseVersion=
            - Ref: GraphDatabaseVersion
            - "\n"
            - installGraphDataScience=
            - Ref: InstallGraphDataScience
            - "\n"
            - graphDataScienceLicenseKey=
            - Ref: GraphDataScienceLicenseKey
            - "\n"
            - installBloom=
            - Ref: InstallBloom
            - "\n"
            - bloomLicenseKey=
            - Ref: BloomLicenseKey
            - "\n"
            - password=
            - Ref: Password
            - "\n"
            - nodeCount=
            - Ref: NodeCount
            - "\n"
            - isSSREnabled=
            - Ref: SelectSSR
            - "\n"
            - "echo Adding neo4j yum repo...\n"
            - "rpm --import https://debian.neo4j.com/neotechnology.gpg.key\n"
            - echo "
            - "[neo4j]\n"
            - "name=Neo4j Yum Repo\n"
            - "baseurl=http://yum.neo4j.com/stable\n"
            - "enabled=1\n"
            - "gpgcheck=1\" > /etc/yum.repos.d/neo4j.repo\n"
            - "echo Installing Graph Database...\n"
            - "export NEO4J_ACCEPT_LICENSE_AGREEMENT=yes\n"
            - "yum -y install neo4j-enterprise-${graphDatabaseVersion}\n"
            - "echo Installing APOC...\n"
            - "mv /var/lib/neo4j/labs/apoc-*-core.jar /var/lib/neo4j/plugins\n"
            - "echo Configuring extensions and security in neo4j.conf...\n"
            - "sed -i s~#dbms.unmanaged_extension_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged~dbms.unmanaged_extension_classes=com.neo4j.bloom.server=/bloom,semantics.extension=/rdf~g\
              \ /etc/neo4j/neo4j.conf\n"
            - "sed -i s/#dbms.security.procedures.unrestricted=my.extensions.example,my.procedures.*/dbms.security.procedures.unrestricted=gds.*,apoc.*,bloom.*/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "sed -i '$a dbms.security.http_auth_allowlist=/,/browser.*,/bloom.*'\
              \ /etc/neo4j/neo4j.conf\n"
            - "sed -i '$a dbms.security.procedures.allowlist=apoc.*,gds.*,bloom.*'\
              \ /etc/neo4j/neo4j.conf\n"
            - "echo Configuring network in neo4j.conf...\n"
            - "sed -i 's/#dbms.default_listen_address=0.0.0.0/dbms.default_listen_address=0.0.0.0/g'\
              \ /etc/neo4j/neo4j.conf\n"
            - "privateIP=$(hostname -i | awk {'print $NF'})\n"
            - "sed -i s/#dbms.default_advertised_address=localhost/dbms.default_advertised_address=${privateIP}/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "if [[ \"$nodeCount\" == 1 ]]; then\n"
            - " if [[ \"$isSSREnabled\" == True ]]; then\n"
            - "  echo SSR Cannot be enabled on a single node\n"
            - "  exit 1\n"
            - " else\n"
            - "  echo Running on a single node.\n"
            - " fi\n"
            - "fi\n"
            - "if [[ \"$nodeCount\" == 3 ]]; then\n"
            - "  echo Running on multiple nodes.  Configuring membership in neo4j.conf...\n"
            - "  region=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone\
              \ | sed 's/.$//')\n"
            - "  instanceId=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n"
            - "  stackName=$(aws cloudformation describe-stack-resources --physical-resource-id\
              \ $instanceId --query 'StackResources[0].StackName' --output text --region\
              \ $region)\n"
            - "  coreMembers=$(aws autoscaling describe-auto-scaling-instances --region\
              \ $region --output text --query \"AutoScalingInstances[?AutoScalingGroupName=='Neo4jAutoScalingGroup'].InstanceId\"\
              \ | xargs -n1 aws ec2 describe-instances --instance-ids $ID --region\
              \ $region --query \"Reservations[].Instances[].PrivateIpAddress\" --output\
              \ text --filter \"Name=tag:aws:cloudformation:stack-name,Values=$stackName\"\
              )\n"
            - "  coreMembers=$(echo $coreMembers | sed 's/ /:5000,/g')\n"
            - "  coreMembers=$(echo $coreMembers):5000\n"
            - "  sed -i s/#causal_clustering.initial_discovery_members=localhost:5000,localhost:5001,localhost:5002/causal_clustering.initial_discovery_members=${coreMembers}/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#dbms.mode=CORE/dbms.mode=CORE/g /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#causal_clustering.discovery_listen_address=:5000/causal_clustering.discovery_listen_address=${privateIP}:5000/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#causal_clustering.transaction_listen_address=:6000/causal_clustering.transaction_listen_address=${privateIP}:6000/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#causal_clustering.raft_listen_address=:7000/causal_clustering.raft_listen_address=${privateIP}:7000/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#dbms.connector.bolt.listen_address=:7687/dbms.connector.bolt.listen_address=${privateIP}:7687/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#dbms.connector.http.advertised_address=:7474/dbms.connector.http.advertised_address=${privateIP}:7474/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#dbms.connector.https.advertised_address=:7473/dbms.connector.https.advertised_address=${privateIP}:7473/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "  if [[ \"$isSSREnabled\" == True ]]; then\n"
            - "   sed -i s/#dbms.routing.enabled=false/dbms.routing.enabled=true/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "   sed -i s/#dbms.routing.advertised_address=:7688/dbms.routing.advertised_address=${privateIP}:7688/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "   sed -i s/#dbms.routing.listen_address=0.0.0.0:7688/dbms.routing.listen_address=${privateIP}:7688/g\
              \ /etc/neo4j/neo4j.conf\n"
            - "   echo dbms.routing.default_router=SERVER >> /etc/neo4j/neo4j.conf\n"
            - "  fi\n"
            - "fi\n"
            - "echo Turning on SSL...\n"
            - "sed -i 's/dbms.connector.https.enabled=false/dbms.connector.https.enabled=true/g'\
              \ /etc/neo4j/neo4j.conf\n"
            - "/etc/pki/tls/certs/make-dummy-cert cert\n"
            - "awk '/-----BEGIN PRIVATE KEY-----/,/-----END PRIVATE KEY-----/' cert\
              \ > private.key\n"
            - "awk '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/' cert\
              \ > public.crt\n"
            - "#for service in bolt https cluster backup; do\n"
            - "for service in https; do\n"
            - "  sed -i \"s/#dbms.ssl.policy.${service}/dbms.ssl.policy.${service}/g\"\
              \ /etc/neo4j/neo4j.conf\n"
            - "  mkdir -p /var/lib/neo4j/certificates/${service}/trusted\n"
            - "  mkdir -p /var/lib/neo4j/certificates/${service}/revoked\n"
            - "  cp private.key /var/lib/neo4j/certificates/${service}\n"
            - "  cp public.crt /var/lib/neo4j/certificates/${service}\n"
            - "done\n"
            - "chown -R neo4j:neo4j /var/lib/neo4j/certificates\n"
            - "chmod -R 755 /var/lib/neo4j/certificates\n"
            - "if [[ $installGraphDataScience == True && $nodeCount == 1 ]]; then\n"
            - "  echo Installing Graph Data Science...\n"
            - "  cp /var/lib/neo4j/products/neo4j-graph-data-science-*.jar /var/lib/neo4j/plugins\n"
            - "fi\n"
            - "if [[ $graphDataScienceLicenseKey != None ]]; then\n"
            - "  echo Writing GDS license key...\n"
            - "  mkdir -p /etc/neo4j/licenses\n"
            - "  echo $graphDataScienceLicenseKey > /etc/neo4j/licenses/neo4j-gds.license\n"
            - "  sed -i '$a gds.enterprise.license_file=/etc/neo4j/licenses/neo4j-gds.license'\
              \ /etc/neo4j/neo4j.conf\n"
            - "fi\n"
            - "if [[ $installBloom == True ]]; then\n"
            - "  echo Installing Bloom...\n"
            - "  cp /var/lib/neo4j/products/bloom-plugin-*.jar /var/lib/neo4j/plugins\n"
            - "fi\n"
            - "if [[ $bloomLicenseKey != None ]]; then\n"
            - "  echo Writing Bloom license key...\n"
            - "  mkdir -p /etc/neo4j/licenses\n"
            - "  echo $bloomLicenseKey > /etc/neo4j/licenses/neo4j-bloom.license\n"
            - "  sed -i '$a neo4j.bloom.license_file=/etc/neo4j/licenses/neo4j-bloom.license'\
              \ /etc/neo4j/neo4j.conf\n"
            - "fi\n"
            - "echo Starting Neo4j...\n"
            - "service neo4j start\n"
            - "neo4j-admin set-initial-password ${password}\n"
  Neo4jInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: Neo4jRole
  Neo4jRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: Neo4jPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - autoscaling:DescribeAutoScalingInstances
            - cloudformation:DescribeStack*
            - ec2:DescribeInstances
            Resource: '*'
Outputs:
  Neo4jURL:
    Description: URL for Neo4j
    Value: You can login to Neo4j on port 7474 (http) or 7473 (https) of any node
      in the autoscaling group.
  Neo4jUsername:
    Description: Username for Neo4j
    Value: The username is neo4j.  The password is what you provided to the template.
